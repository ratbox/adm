#!/usr/bin/env python

import CloudFlare

import sys

def main(email, token, zone_name, aold, anew):
	cf = CloudFlare.CloudFlare(email=email, token=token)
	try:
		params = {'name':zone_name}
		zones = cf.zones.get(params=params)
	except CloudFlare.exceptions.CloudFlareAPIError as e:
		exit('/zones %d %s - api call failed' % (e, e))
	except Exception as e:
		exit('/zones.get - %s - api call failed' % (e))

	if len(zones) == 0:
		exit('/zones.get - %s - zone not found' % (zone_name))

	if len(zones) != 1:
		exit('/zones.get - %s - api call returned %d items' % (zone_name, len(zones)))

	zone = zones[0]

	zone_name = zone['name']
	zone_id = zone['id']

	try:
		dns_records = cf.zones.dns_records.get(zone_id)
	except CloudFlare.exceptions.CloudFlareAPIError as e:
		exit('/zones.dns_records.get %s - %d %s' % (zone_name, e, e))

	for dns_record in sorted(dns_records, key=lambda v: v['name']):
		if dns_record['content'] == aold:
			dns_record_id = dns_record['id']
			new_dns_record = {
				# Must have type/name/content (even if they don't change)
				'type':dns_record['type'],
				'name':dns_record['name'],
				'content':anew,
				# now add new values you want to change
				'proxied':False
			}
			try:
				dns_record = cf.zones.dns_records.put(zone_id, dns_record['id'], data=new_dns_record)
			except CloudFlare.exceptions.CloudFlareAPIError as e:
				exit('/zones/dns_records.put %d %s - api call failed' % (e, e))
			print('%s: success!' % zone_name)
			exit(0)

	exit('No such A record.')

if __name__ == '__main__':
	email = 'mail@example.com'
	token = 'XXX'

	try:
		zone = sys.argv[1]
		aold = sys.argv[2]
		anew = sys.argv[3]
	except IndexError:
		exit('usage: cf-update-a <zone> <old_ip> <new_ip>')

	main(email, token, zone, aold, anew)
